{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\src\\\\components\\\\input.js\";\nimport React, { Component } from 'react';\nimport * as actions from '../actions';\nimport { reducer as formReducer, reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Form from './profile/form';\n\nvar validate = function validate(values) {\n  var errors = {};\n\n  if (!values.comment) {\n    errors.comment = 'Required';\n  }\n}; //const maxLength = max => value =>\n//  value && value.length > max ? `Must be ${max} characters or less` : undefined\n//const maxLength = maxLength(255)\n//const required = value => value ? undefined : 'Required'\n\n\nvar renderField = function renderField(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      type = _ref.type,\n      _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error,\n      warning = _ref$meta.warning;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, label), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({}, input, {\n    class: \"form-control\",\n    placeholder: label,\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), touched && (error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, error) || warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, warning))));\n};\n\nvar InputForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InputForm, _Component);\n\n  function InputForm() {\n    _classCallCheck(this, InputForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InputForm).apply(this, arguments));\n  }\n\n  _createClass(InputForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Comment\"), React.createElement(Field, {\n        name: \"comment\",\n        component: renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return InputForm;\n}(Component);\n\nInputForm = reduxForm({\n  validate: validate,\n  form: 'commentForm'\n})(InputForm);\nexport default connect(null, actions)(InputForm);","map":{"version":3,"sources":["C:\\Users\\Steve\\Desktop\\Code\\Ecom\\client\\src\\components\\input.js"],"names":["React","Component","actions","reducer","formReducer","reduxForm","Field","connect","Form","validate","values","errors","comment","renderField","input","label","type","meta","touched","error","warning","InputForm","props","handleSubmit","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAAQC,OAAO,IAAIC,WAAnB,EAAgCC,SAAhC,EAA2CC,KAA3C,QAAuD,YAAvD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM,EAAI;AACzB,MAAMC,MAAM,GAAG,EAAf;;AACA,MAAG,CAACD,MAAM,CAACE,OAAX,EAAmB;AACjBD,IAAAA,MAAM,CAACC,OAAP,GAAiB,UAAjB;AACD;AACF,CALD,C,CAOA;AACA;AACA;AACA;;;AAEE,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,MAAiBC,IAAjB,QAAiBA,IAAjB;AAAA,uBAAuBC,IAAvB;AAAA,MAA+BC,OAA/B,aAA+BA,OAA/B;AAAA,MAAwCC,KAAxC,aAAwCA,KAAxC;AAAA,MAA+CC,OAA/C,aAA+CA,OAA/C;AAAA,SAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQL,KAAR,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,+CAAWD,KAAX;AAAkB,IAAA,KAAK,EAAC,cAAxB;AAAuC,IAAA,WAAW,EAAEC,KAApD;AAA2D,IAAA,IAAI,EAAEC,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEGE,OAAO,KAAMC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,KAAP,CAAV,IAAoCC,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,OAAP,CAApD,CAFV,CAFF,CADkB;AAAA,CAApB;;IAUIC,S;;;;;;;;;;;;;6BACO;AACP,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,KAAD;AACA,QAAA,IAAI,EAAC,SADL;AAEA,QAAA,SAAS,EAAEV,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AASD;;;;EAXmBZ,S;;AAcxBoB,SAAS,GAAGhB,SAAS,CAAC;AAClBI,EAAAA,QAAQ,EAARA,QADkB;AAElBe,EAAAA,IAAI,EAAE;AAFY,CAAD,CAAT,CAGTH,SAHS,CAAZ;AAKA,eAAed,OAAO,CAAC,IAAD,EAAOL,OAAP,CAAP,CAAuBmB,SAAvB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport * as actions from '../actions';\r\nimport {reducer as formReducer, reduxForm, Field} from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport Form from './profile/form';\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if(!values.comment){\r\n    errors.comment = 'Required'\r\n  }\r\n}\r\n\r\n//const maxLength = max => value =>\r\n//  value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n//const maxLength = maxLength(255)\r\n//const required = value => value ? undefined : 'Required'\r\n\r\n  const renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\r\n    <div>\r\n      <label>{label}</label>\r\n      <div>\r\n        <input {...input} class=\"form-control\" placeholder={label} type={type}/>\r\n        {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\nclass InputForm extends Component {\r\n    render() {\r\n      return (\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <label>Comment</label>\r\n          <Field \r\n          name=\"comment\" \r\n          component={renderField}\r\n          ></Field>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nInputForm = reduxForm({\r\n    validate,\r\n    form: 'commentForm',\r\n})(InputForm);\r\n\r\nexport default connect(null, actions)(InputForm);\r\n"]},"metadata":{},"sourceType":"module"}