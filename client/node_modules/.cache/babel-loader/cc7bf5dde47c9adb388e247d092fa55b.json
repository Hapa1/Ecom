{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Code\\\\Ecom\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport userReducer from './reducers/userReducer.js';\nimport itemReducer from './reducers/itemReducer';\nimport profileReducer from './reducers/profileReducer';\nimport singleItemReducer from './reducers/singleItemReducer';\nimport commentReducer from './reducers/commentReducer';\nimport { reducer as formReducer } from 'redux-form';\nimport Input from './components/input.js';\ndocument.title = \"Lootbox\";\nvar store = createStore(combineReducers({\n  form: formReducer,\n  userReducer: userReducer,\n  itemReducer: itemReducer,\n  profileReducer: profileReducer,\n  singleItemReducer: singleItemReducer,\n  commentReducer: commentReducer\n}), {}, applyMiddleware(thunk));\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); //////////////////////////////////\n//                              //\n//  REDUX CODE FOR REFERENCE!!! //\n//                              //\n//////////////////////////////////\n//import { createStore } from 'redux';\n//default state = initial state \n\n/**\r\nconst mathReducer = (state = {\r\n    result: 1,\r\n    lastValues: []\r\n}, action) => {\r\n    switch (action.type){\r\n        case \"ADD\":\r\n            state = {\r\n                 result: state.result,\r\n                 lastValues: state.lastValues,\r\n                 result: state.result + action.payload,\r\n                 lastValues: [...state.lastValues, action.payload]\r\n                 \r\n            };\r\n            break;\r\n            case \"SUBTRACT\":\r\n            state = {\r\n                ...state,\r\n                result: state.result - action.payload,\r\n                lastValues: [...state.lastValues, action.payload]\r\n            };\r\n            break;\r\n    }\r\n    return state;\r\n\r\n};\r\n\r\nconst userReducer = (state = {\r\n    name: \"\",\r\n    age: 0,\r\n}, action) => {\r\n    switch (action.type){\r\n        case \"SET_NAME\":\r\n            state = {\r\n                 ...state,\r\n                 name: action.payload\r\n            };\r\n            break;\r\n            case \"SET_AGE\":\r\n            state = {\r\n                ...state,\r\n                age: action.payload\r\n            };\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\nconst store = createStore(combineReducers({\r\n    //mathReducer: mathReducer,\r\n    //userReducer: userReducer,\r\n    mathReducer,\r\n    userReducer,\r\n}), {}/**, applyMiddleware(myLogger )*/\n//);\n//myLogger middlewar3\n\n/** \r\nconst myLogger = (store) => (next) => (action) => {\r\n    console.log(\"Logged Action \", action);\r\n    next(action);\r\n}\r\nstore.subscribe(() => {\r\n    console.log(\"Updated!\", store.getState())\r\n});\r\n\r\nstore.dispatch({\r\n    type: \"ADD\",\r\n    payload: 10\r\n});\r\n*/","map":{"version":3,"sources":["C:\\Users\\Steve\\Desktop\\Code\\Ecom\\client\\src\\index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","combineReducers","applyMiddleware","Provider","thunk","userReducer","itemReducer","profileReducer","singleItemReducer","commentReducer","reducer","formReducer","Input","document","title","store","form","render","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAO,kDAAP;AACA,OAAO,sDAAP;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACAC,QAAQ,CAACC,KAAT,GAAiB,SAAjB;AAEA,IAAMC,KAAK,GAAGf,WAAW,CAACC,eAAe,CAAC;AACtCe,EAAAA,IAAI,EAAEL,WADgC;AAEtCN,EAAAA,WAAW,EAAXA,WAFsC;AAGtCC,EAAAA,WAAW,EAAXA,WAHsC;AAItCC,EAAAA,cAAc,EAAdA,cAJsC;AAKtCC,EAAAA,iBAAiB,EAAjBA,iBALsC;AAMtCC,EAAAA,cAAc,EAAdA;AANsC,CAAD,CAAhB,EAQtB,EARsB,EAQnBP,eAAe,CAACE,KAAD,CARI,CAAzB;AAUAP,QAAQ,CAACoB,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB,CAAhB,EACIF,QAAQ,CAACK,cAAT,CAAwB,MAAxB,CADJ,E,CAQA;AACA;AACA;;AACAnB,aAAa,CAACoB,UAAd,G,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDuC;AAEvC;;AACA","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './reducers/userReducer.js';\r\nimport itemReducer from './reducers/itemReducer';\r\nimport profileReducer from './reducers/profileReducer';\r\nimport singleItemReducer from './reducers/singleItemReducer';\r\nimport commentReducer from './reducers/commentReducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport Input from './components/input.js'\r\ndocument.title = \"Lootbox\";\r\n\r\nconst store = createStore(combineReducers({\r\n    form: formReducer,\r\n    userReducer,\r\n    itemReducer,\r\n    profileReducer,\r\n    singleItemReducer,\r\n    commentReducer,\r\n\r\n}),{},applyMiddleware(thunk));\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n//////////////////////////////////\r\n//                              //\r\n//  REDUX CODE FOR REFERENCE!!! //\r\n//                              //\r\n//////////////////////////////////\r\n\r\n//import { createStore } from 'redux';\r\n\r\n//default state = initial state \r\n/**\r\nconst mathReducer = (state = {\r\n    result: 1,\r\n    lastValues: []\r\n}, action) => {\r\n    switch (action.type){\r\n        case \"ADD\":\r\n            state = {\r\n                 result: state.result,\r\n                 lastValues: state.lastValues,\r\n                 result: state.result + action.payload,\r\n                 lastValues: [...state.lastValues, action.payload]\r\n                 \r\n            };\r\n            break;\r\n            case \"SUBTRACT\":\r\n            state = {\r\n                ...state,\r\n                result: state.result - action.payload,\r\n                lastValues: [...state.lastValues, action.payload]\r\n            };\r\n            break;\r\n    }\r\n    return state;\r\n\r\n};\r\n\r\nconst userReducer = (state = {\r\n    name: \"\",\r\n    age: 0,\r\n}, action) => {\r\n    switch (action.type){\r\n        case \"SET_NAME\":\r\n            state = {\r\n                 ...state,\r\n                 name: action.payload\r\n            };\r\n            break;\r\n            case \"SET_AGE\":\r\n            state = {\r\n                ...state,\r\n                age: action.payload\r\n            };\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\nconst store = createStore(combineReducers({\r\n    //mathReducer: mathReducer,\r\n    //userReducer: userReducer,\r\n    mathReducer,\r\n    userReducer,\r\n}), {}/**, applyMiddleware(myLogger )*///);\r\n\r\n//myLogger middlewar3\r\n/** \r\nconst myLogger = (store) => (next) => (action) => {\r\n    console.log(\"Logged Action \", action);\r\n    next(action);\r\n}\r\nstore.subscribe(() => {\r\n    console.log(\"Updated!\", store.getState())\r\n});\r\n\r\nstore.dispatch({\r\n    type: \"ADD\",\r\n    payload: 10\r\n});\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}